{"version":3,"sources":["utils/colorGenerator.js","App.js","reportWebVitals.js","index.js"],"names":["generateColor","Math","random","toString","App","useState","color","setColor","isCopied","setIsCopied","useEffect","document","addEventListener","handleClick","event","currentTarget","target","key","className","style","backgroundColor","onClick","setTimeout","navigator","clipboard","writeText","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"uMAIeA,EAJO,WACpB,MAAO,MAAQ,GAAG,IAAIC,KAAKC,SAAW,GAAGC,SAAS,K,eCoDrCC,MA/Cf,WAAgB,IAAD,EACaC,mBAASL,KADtB,mBACNM,EADM,KACCC,EADD,OAEmBF,oBAAS,GAF5B,mBAENG,EAFM,KAEIC,EAFJ,KAIbC,qBAAU,WACRC,SAASC,iBAAiB,QAASC,KAClC,IAEH,IAAMA,EAAc,SAACC,GACfA,EAAMC,gBAAkBD,EAAME,QAAwB,MAAdF,EAAMG,MAChDV,EAASP,KACTS,GAAY,KAYhB,OACE,qCACID,GACA,qBAAKU,UAAU,SAAf,sBAIF,qBACEC,MAAO,CAAEC,gBAAiBd,GAC1Be,QAASR,EACTK,UAAU,kBAHZ,SAKE,mBACEC,MAAO,CAAEb,MAAOA,GAChBe,QAtBgB,WACtBZ,GAAY,GACZa,YAAW,WACTb,GAAY,KACX,KACHc,UAAUC,UAAUC,UAAUnB,IAkBxBY,UAAU,aAHZ,SAKGZ,UClCIoB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEF1B,SAAS2B,eAAe,SAM1BZ,K","file":"static/js/main.46a803c0.chunk.js","sourcesContent":["const generateColor = () => {\n  return \"#\" + ((1<<24)*Math.random() | 0).toString(16);\n}\n\nexport default generateColor;\n","import { useEffect, useState } from \"react\";\n\nimport generateColor from './utils/colorGenerator';\n\nimport './App.css';\n\nfunction App() {\n  const [color, setColor] = useState(generateColor());\n  const [isCopied, setIsCopied] = useState(false);\n\n  useEffect(() => {\n    document.addEventListener('keyup', handleClick);\n  }, [])\n\n  const handleClick = (event) => {\n    if (event.currentTarget === event.target || event.key === ' ') {\n      setColor(generateColor())\n      setIsCopied(false);\n    }\n  }\n\n  const handleCopyColor = () => {\n    setIsCopied(true);\n    setTimeout(() => {\n      setIsCopied(false)\n    }, 3000)\n    navigator.clipboard.writeText(color)\n  }\n\n  return (\n    <>\n      { isCopied && \n        <div className=\"copied\">\n          Copied !\n        </div>\n      }\n      <div\n        style={{ backgroundColor: color }}\n        onClick={handleClick}\n        className=\"color-container\"\n      >\n        <p\n          style={{ color: color }}\n          onClick={handleCopyColor}\n          className=\"color-code\"\n        >\n          {color}\n        </p>\n      </div>\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}